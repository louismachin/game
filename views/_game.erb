<script>
const DEBUG = false
// Game configuration
const TILE_SIZE = 32
const ROOM_WIDTH = 16 // tiles
const ROOM_HEIGHT = 16 // tiles

// Canvas setup
const maskCanvas = document.getElementById('mask-canvas')
const maskCtx = maskCanvas.getContext('2d')
maskCanvas.width = ROOM_WIDTH * TILE_SIZE
maskCanvas.height = ROOM_HEIGHT * TILE_SIZE

const spriteCanvas = document.getElementById('sprite-canvas')
const spriteCtx = spriteCanvas.getContext('2d')
spriteCanvas.width = ROOM_WIDTH * TILE_SIZE
spriteCanvas.height = ROOM_HEIGHT * TILE_SIZE

// WebSocket variables
let ws
let myPlayerId
let players = {}
let roomTiles

// Input handling
let keysPressed = new Set()
let lastMoveTime = 0
let currentDirection = null

// Enhanced player object with smooth movement
function createPlayer(id, x, y) {
    return {
        id: id,
        // Target position (where the player should end up)
        x: x,
        y: y,
        // Current visual position (for smooth animation)
        visualX: x,
        visualY: y,
        // Animation state
        isMoving: false,
        moveStartTime: 0,
        moveFromX: x,
        moveFromY: y
    };
}

// Main game loop
function gameLoop(currentTime) {
    handleContinuousMovement(currentTime)
    updatePlayerAnimations(currentTime)
    clearSpriteCanvas()
    Object.values(players).forEach(player => {
        const isMyPlayer = player.id === myPlayerId
        drawPlayer(player, isMyPlayer)
    })
    animationFrameId = requestAnimationFrame(gameLoop)
}


<%= erb :_draw_room %>
<%= erb :_draw_player %>
<%= erb :_movement %>
<%= erb :_input %>
<%= erb :_maths %>
<%= erb :_connect %>

// Initialize game
connect()
gameLoop(performance.now())
</script>