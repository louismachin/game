const tileImageCache = new Map()

async function loadTileImage(tileId) {
    if (tileImageCache.has(tileId)) {
        return tileImageCache.get(tileId)
    }
  
    return new Promise((resolve, reject) => {
        const img = new Image()
        img.onload = () => {
            tileImageCache.set(tileId, img)
            resolve(img)
        }
        img.onerror = reject
        img.src = `/tile/${tileId}`
    })
}

async function drawRoom(roomTiles) {
    // Clear canvas
    maskCtx.fillStyle = '#ecf0f1'
    maskCtx.fillRect(0, 0, maskCanvas.width, maskCanvas.height)
    for (let x = 0; x < ROOM_WIDTH; x += 1) {
        for (let y = 0; y < ROOM_HEIGHT; y += 1) {
            let tileId = roomTiles[y][x]
            try {
                const tileImage = await loadTileImage(tileId)
                maskCtx.drawImage(
                    tileImage,
                    x * TILE_SIZE,
                    y * TILE_SIZE,
                    TILE_SIZE,
                    TILE_SIZE
                )
            } catch (error) {
                console.error(`Failed to load tile ${tileId}:`, error)
                // Fallback to colored rectangle if image fails to load
                maskCtx.fillStyle = '#521e2a'
                maskCtx.fillRect(
                    x * TILE_SIZE,
                    y * TILE_SIZE,
                    TILE_SIZE,
                    TILE_SIZE
                )
            }
        }
    }
}